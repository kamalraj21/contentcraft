---
import Layout from '../../layouts/Layout.astro';
import CaseStudyNavigation from '../../components/CaseStudyNavigation.astro';
import DocumentationCaseStudy from '../../components/DocumentationCaseStudy.jsx';

const pageTitle = "Documentation Redesign";

const sectionNavLinks = [
  { label: "Challenge", href: "#challenge" },
  { label: "Strategy", href: "#strategy" },
  { label: "Results", href: "#results" },
  { label: "Insights", href: "#insights" }
];

const projectInfo = {
  client: "Enterprise Platform Team",
  role: "Documentation Lead",
  timeline: "2022-2023",
  focus: "Information Architecture"
};

const challenge = {
  title: "The Challenge",
  description: "Transform a complex, outdated documentation system into a modern, user-friendly knowledge hub that scales with the product while reducing maintenance overhead.",
  painPoints: [
    "Fragmented documentation across multiple platforms",
    "Inconsistent information architecture and style",
    "High maintenance overhead and outdated content",
    "Poor search functionality and content discoverability"
  ]
};

const strategy = {
  title: "Strategic Approach",
  steps: [
    {
      action: "Content Audit & Analysis",
      details: "Conducted comprehensive inventory of existing documentation, analyzing user behavior patterns and identifying critical gaps and redundancies"
    },
    {
      action: "Information Architecture Redesign",
      details: "Developed new task-based navigation system and content hierarchy, focusing on user journeys and common workflows"
    },
    {
      action: "Content Strategy Development",
      details: "Created scalable content framework with reusable components, style guides, and automated validation processes"
    },
    {
      action: "Implementation & Migration",
      details: "Executed phased migration to new system while maintaining content integrity and improving searchability"
    }
  ]
};

const implementation = {
  title: "Implementation Details",
  areas: [
    {
      title: "Task-Based Navigation",
      description: "Reorganized content around user tasks and goals, improving findability and relevance"
    },
    {
      title: "Content Components",
      description: "Created reusable content blocks and templates to ensure consistency and reduce maintenance"
    },
    {
      title: "Automated Validation",
      description: "Implemented automated checks for content quality, links, and style guide compliance"
    }
  ]
};

const outcomes = [
  {
    metric: "35%",
    label: "User Satisfaction",
    description: "Improved satisfaction scores through better content organization"
  },
  {
    metric: "40%",
    label: "Update Speed",
    description: "Faster content updates through streamlined processes"
  },
  {
    metric: "25%",
    label: "Support Load",
    description: "Reduction in documentation-related support queries"
  }
];

const insights = [
  "User behavior analysis is crucial for effective information architecture",
  "Standardized content components significantly reduce maintenance overhead",
  "Automated validation processes ensure consistent content quality",
  "Regular user testing drives continuous improvement in documentation usability"
];
---

<Layout title={pageTitle}>
  <!-- Progress Bar -->
  <div class="fixed top-16 left-0 right-0 h-1 bg-gray-100 z-40">
    <div class="progress-bar h-full bg-blue-600"></div>
  </div>

  <DocumentationCaseStudy 
    sectionNavLinks={sectionNavLinks}
    projectInfo={projectInfo}
    challenge={challenge}
    strategy={strategy}
    implementation={implementation}
    outcomes={outcomes}
    insights={insights}
    client:load 
  />
  
  <CaseStudyNavigation currentSlug="documentation-redesign" />
</Layout>

<style>
  .progress-bar {
    width: 0;
    transition: width 0.2s ease-out;
  }
</style>

<script>
  // Progress bar functionality
  document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.querySelector('.progress-bar');
    
    function updateProgressBar() {
      if (!progressBar) return;
      const winScroll = window.scrollY;
      const height = document.documentElement.scrollHeight - window.innerHeight;
      const scrolled = (winScroll / height) * 100;
      progressBar.style.width = scrolled + '%';
    }

    window.addEventListener('scroll', updateProgressBar);
    window.addEventListener('resize', updateProgressBar);
    
    updateProgressBar();
    
    return () => {
      window.removeEventListener('scroll', updateProgressBar);
      window.removeEventListener('resize', updateProgressBar);
    };
  });
</script>